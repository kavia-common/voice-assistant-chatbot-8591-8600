{"is_source_file": true, "format": "Python", "description": "This file provides functions for text-to-speech synthesis using different engines (pyttsx3 and gTTS), with fallback mechanisms. It defines internal functions for each engine and a public function to coordinate the process based on configuration.", "external_files": ["django.conf", "pyttsx3", "wave", "tempfile", "os", "io", "gtts"], "external_methods": ["django.conf.settings", "pyttsx3.init", "pyttsx3.Engine.getProperty", "pyttsx3.Engine.setProperty", "pyttsx3.Engine.save_to_file", "pyttsx3.Engine.runAndWait", "gtts.gTTS", "gtts.gTTS.write_to_fp"], "published": ["synthesize_speech"], "classes": [], "methods": [{"name": "Optional[Tuple[bytes,str]] _try_pyttsx3(text: str, voice: Optional[str] = None)", "description": "Attempts to synthesize speech with pyttsx3 into a WAV byte stream, returning data and mime type on success.", "scope": "", "scopeKind": ""}, {"name": "Optional[Tuple[bytes,str]] _try_gtts(text: str, lang: str = \"en\")", "description": "Attempts to synthesize speech with gTTS into an MP3 in memory, returning data and mime type on success.", "scope": "", "scopeKind": ""}, {"name": "Tuple[Optional[bytes],str,str] synthesize_speech(text: str, voice: Optional[str] = None, engine: Optional[str] = None)", "description": "Public interface to synthesize speech from text using specified engine with fallback options, returning audio bytes, mime type, and engine used.", "scope": "", "scopeKind": ""}], "calls": ["pyttsx3.init", "engine.getProperty", "engine.setProperty", "engine.save_to_file", "engine.runAndWait", "gTTS", "gtts.write_to_fp", "os.remove"], "search-terms": ["tts", "speech synthesis", "pyttsx3", "gtts", "synthesize_speech", "text to speech"], "state": 2, "file_id": 23, "knowledge_revision": 47, "git_revision": "", "ctags": [{"_type": "tag", "name": "_try_gtts", "path": "/home/kavia/workspace/code-generation/voice-assistant-chatbot-8591-8600/voice_chatbot_backend/api/services/tts.py", "pattern": "/^def _try_gtts(text: str, lang: str = \"en\") -> Optional[Tuple[bytes, str]]:$/", "language": "Python", "typeref": "typename:Optional[Tuple[bytes,str]]", "kind": "function", "signature": "(text: str, lang: str = \"en\")"}, {"_type": "tag", "name": "_try_pyttsx3", "path": "/home/kavia/workspace/code-generation/voice-assistant-chatbot-8591-8600/voice_chatbot_backend/api/services/tts.py", "pattern": "/^def _try_pyttsx3(text: str, voice: Optional[str] = None) -> Optional[Tuple[bytes, str]]:$/", "language": "Python", "typeref": "typename:Optional[Tuple[bytes,str]]", "kind": "function", "signature": "(text: str, voice: Optional[str] = None)"}, {"_type": "tag", "name": "synthesize_speech", "path": "/home/kavia/workspace/code-generation/voice-assistant-chatbot-8591-8600/voice_chatbot_backend/api/services/tts.py", "pattern": "/^def synthesize_speech(text: str, voice: Optional[str] = None, engine: Optional[str] = None) -> T/", "language": "Python", "typeref": "typename:Tuple[Optional[bytes],str,str]", "kind": "function", "signature": "(text: str, voice: Optional[str] = None, engine: Optional[str] = None)"}], "hash": "17229ecfe6ca4604e972640059af44c3", "format-version": 4, "code-base-name": "voice_chatbot_backend", "filename": "voice_chatbot_backend/api/services/tts.py", "revision_history": [{"47": ""}]}