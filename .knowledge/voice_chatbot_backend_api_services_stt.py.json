{"is_source_file": true, "format": "Python", "description": "This file provides a speech-to-text (STT) service, implementing functions to transcribe audio data using either the CMU Sphinx engine for offline recognition or Google's Web Speech API, depending on the configuration. It manages the recognition process, handles fallback between engines, and exposes a public interface for transcription.", "external_files": ["io", "time", "django.conf.settings", "speech_recognition as sr"], "external_methods": ["sr.Recognizer", "sr.AudioFile", "sr.Recognizer.record", "sr.Recognizer.recognize_sphinx", "sr.Recognizer.recognize_google"], "published": ["transcribe_file"], "classes": [], "methods": [{"name": "Optional[str] _recognize_with_sphinx(recognizer: sr.Recognizer, audio: sr.AudioData, language: Optional[str])", "description": "Attempts to recognize speech using the offline CMU Sphinx engine, returning None if it fails or is unavailable.", "scope": "", "scopeKind": ""}, {"name": "str _recognize_with_google(recognizer: sr.Recognizer, audio: sr.AudioData, language: Optional[str])", "description": "Recognizes speech using Google Web Speech API without an API key, potentially rate-limited.", "scope": "", "scopeKind": ""}, {"name": "Dict[str,Any] transcribe_file(file_bytes: bytes, language: Optional[str] = None)", "description": "Public function that transcribes the input audio bytes using the preferred engine, with fallback mechanisms, and returns a dictionary containing the transcribed text, engine used, and processing duration.", "scope": "", "scopeKind": ""}], "calls": ["sr.AudioFile", "sr.Recognizer.record", "recognizer.recognize_sphinx", "recognizer.recognize_google"], "search-terms": ["transcribe", "speech recognition", "pocketsphinx", "Google Web Speech API", "offline speech recognition"], "state": 2, "file_id": 20, "knowledge_revision": 41, "git_revision": "", "ctags": [{"_type": "tag", "name": "_recognize_with_google", "path": "/home/kavia/workspace/code-generation/voice-assistant-chatbot-8591-8600/voice_chatbot_backend/api/services/stt.py", "pattern": "/^def _recognize_with_google(recognizer: sr.Recognizer, audio: sr.AudioData, language: Optional[st/", "language": "Python", "typeref": "typename:str", "kind": "function", "signature": "(recognizer: sr.Recognizer, audio: sr.AudioData, language: Optional[str])"}, {"_type": "tag", "name": "_recognize_with_sphinx", "path": "/home/kavia/workspace/code-generation/voice-assistant-chatbot-8591-8600/voice_chatbot_backend/api/services/stt.py", "pattern": "/^def _recognize_with_sphinx(recognizer: sr.Recognizer, audio: sr.AudioData, language: Optional[st/", "language": "Python", "typeref": "typename:Optional[str]", "kind": "function", "signature": "(recognizer: sr.Recognizer, audio: sr.AudioData, language: Optional[str])"}, {"_type": "tag", "name": "sr", "path": "/home/kavia/workspace/code-generation/voice-assistant-chatbot-8591-8600/voice_chatbot_backend/api/services/stt.py", "pattern": "/^import speech_recognition as sr$/", "language": "Python", "kind": "namespace", "nameref": "module:speech_recognition"}, {"_type": "tag", "name": "transcribe_file", "path": "/home/kavia/workspace/code-generation/voice-assistant-chatbot-8591-8600/voice_chatbot_backend/api/services/stt.py", "pattern": "/^def transcribe_file(file_bytes: bytes, language: Optional[str] = None) -> Dict[str, Any]:$/", "language": "Python", "typeref": "typename:Dict[str,Any]", "kind": "function", "signature": "(file_bytes: bytes, language: Optional[str] = None)"}], "hash": "70d0847a804e72237042ad93e1412fd9", "format-version": 4, "code-base-name": "voice_chatbot_backend", "filename": "voice_chatbot_backend/api/services/stt.py", "revision_history": [{"41": ""}]}